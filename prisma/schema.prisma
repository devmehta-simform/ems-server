// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String            @unique
  role              Roles
  password          String
  avatar            String
  passwordUpdatedAt DateTime
  isActive          Boolean
  events            Event[]
  purchases         PurchaseHistory[]
  reviews           Review[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  deletedAt         DateTime
}

model Event {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  userId              String            @db.ObjectId
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  images              String[]          @default([])
  name                String
  description         String
  ticketPrice         Int
  numberOfTickets     Int
  numberOfTicketsSold Int
  venue               String
  dateOfEvent         DateTime
  discount            Discount?
  purchaseHistory     PurchaseHistory[]
  reviews             Review[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  deletedAt           DateTime
}

model Discount {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  event          Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String         @unique @db.ObjectId
  startsAt       DateTime
  endsAt         DateTime
  status         DiscountStatus
  discountAmount Int
}

model PurchaseHistory {
  ticketId    String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  event       Event         @relation(fields: [eventId], references: [id])
  eventId     String        @db.ObjectId
  status      BookingStatus
  bookingDate DateTime
  qrCode      String
  transaction Transaction[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  review    String
  rating    Rating
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime
}

model Transaction {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  purchaseHistory   PurchaseHistory   @relation(fields: [ticketId], references: [ticketId])
  ticketId          String            @db.ObjectId
  dateOfTransaction DateTime          @default(now())
  amount            Int
  status            TransactionStatus
  paymentMethod     String
}

enum Rating {
  VeryBad
  Bad
  Average
  Good
  VeryGood
}

enum Roles {
  Guest
  Host
  Volunteer
}

enum DiscountStatus {
  Active
  InActive
  UpComing
}

enum BookingStatus {
  Expired
  Used
  Cancelled
}

enum TransactionStatus {
  Completed
  Pending
  Failed
}
